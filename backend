const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const mongoose = require("mongoose");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
require("dotenv").config();

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
  },
});

// Middlewares
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("MongoDB Connected"))
  .catch((err) => console.error(err));

// User Model
const UserSchema = new mongoose.Schema({
  username: String,
  password: String,
  countryCode: String,
  phone: String,
  country: String,
});
const User = mongoose.model("User", UserSchema);

// Message Model
const MessageSchema = new mongoose.Schema({
  sender: mongoose.Schema.Types.ObjectId,
  receiver: mongoose.Schema.Types.ObjectId,
  content: String,
  country: String,
  timestamp: { type: Date, default: Date.now }
});
const Message = mongoose.model("Message", MessageSchema);

// List of country codes
const countryCodes = [
  { code: "+1", country: "USA" },
  { code: "+44", country: "UK" },
  { code: "+52", country: "Mexico" },
  { code: "+57", country: "Colombia" },
  { code: "+55", country: "Brazil" },
  { code: "+91", country: "India" },
  { code: "+51", country: "Peru" },
  { code: "+54", country: "Argentina" },
  { code: "+593", country: "Ecuador" }
];

app.get("/country-codes", (req, res) => {
  res.json(countryCodes);
});

// Authentication Routes
app.post("/register", async (req, res) => {
  try {
    const { username, password, countryCode, phone, country } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword, countryCode, phone, country });
    await user.save();
    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post("/login", async (req, res) => {
  try {
    const { countryCode, phone, password } = req.body;
    const user = await User.findOne({ countryCode, phone });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: "Invalid credentials" });
    }
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Authentication Middleware
const authenticate = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.status(403).json({ message: "Access denied" });
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ message: "Invalid token" });
    req.userId = decoded.userId;
    next();
  });
};

// Socket.IO Authentication
io.use((socket, next) => {
  const token = socket.handshake.query.token;
  if (!token) return next(new Error("Authentication error"));
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return next(new Error("Authentication error"));
    socket.userId = decoded.userId;
    next();
  });
});

// Socket.IO Events
io.on("connection", (socket) => {
  console.log("New client connected: ", socket.id);
  
  socket.on("sendMessage", async (data) => {
    const message = new Message({ sender: socket.userId, receiver: data.receiver, content: data.content, country: data.country });
    await message.save();
    io.emit("receiveMessage", data);
  });

  socket.on("disconnect", () => {
    console.log("Client disconnected");
  });
});

// Reports API
app.get("/reports/users", authenticate, async (req, res) => {
  const userCount = await User.countDocuments();
  res.json({ userCount });
});

app.get("/reports/messages", authenticate, async (req, res) => {
  const messageCount = await Message.countDocuments();
  res.json({ messageCount });
});

app.get("/reports/messages-by-country", authenticate, async (req, res) => {
  const messagesByCountry = await Message.aggregate([
    { $group: { _id: "$country", count: { $sum: 1 } } }
  ]);
  res.json({ messagesByCountry });
});

// Start Server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => console.log(`Server running on port ${PORT}`));


